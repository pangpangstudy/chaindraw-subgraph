// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EscrowCreated extends ethereum.Event {
  get params(): EscrowCreated__Params {
    return new EscrowCreated__Params(this);
  }
}

export class EscrowCreated__Params {
  _event: EscrowCreated;

  constructor(event: EscrowCreated) {
    this._event = event;
  }

  get concertId(): string {
    return this._event.parameters[0].value.toString();
  }

  get ticketType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get escrowAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  MarketAddress(): Address {
    let result = super.call("MarketAddress", "MarketAddress():(address)", []);

    return result[0].toAddress();
  }

  try_MarketAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MarketAddress",
      "MarketAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allEscrows(param0: BigInt): Address {
    let result = super.call("allEscrows", "allEscrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allEscrows(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allEscrows", "allEscrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createEscrow(
    _organizer: Address,
    _concertId: string,
    _ticketType: BigInt,
    _typeName: string,
    _name: string,
    _price: BigInt,
    _url: string,
    _ticketCount: BigInt,
    _ddl: BigInt,
    concertEndDate: BigInt,
  ): Address {
    let result = super.call(
      "createEscrow",
      "createEscrow(address,string,uint256,string,string,uint256,string,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_organizer),
        ethereum.Value.fromString(_concertId),
        ethereum.Value.fromUnsignedBigInt(_ticketType),
        ethereum.Value.fromString(_typeName),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromUnsignedBigInt(_ticketCount),
        ethereum.Value.fromUnsignedBigInt(_ddl),
        ethereum.Value.fromUnsignedBigInt(concertEndDate),
      ],
    );

    return result[0].toAddress();
  }

  try_createEscrow(
    _organizer: Address,
    _concertId: string,
    _ticketType: BigInt,
    _typeName: string,
    _name: string,
    _price: BigInt,
    _url: string,
    _ticketCount: BigInt,
    _ddl: BigInt,
    concertEndDate: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createEscrow",
      "createEscrow(address,string,uint256,string,string,uint256,string,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_organizer),
        ethereum.Value.fromString(_concertId),
        ethereum.Value.fromUnsignedBigInt(_ticketType),
        ethereum.Value.fromString(_typeName),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromUnsignedBigInt(_ticketCount),
        ethereum.Value.fromUnsignedBigInt(_ddl),
        ethereum.Value.fromUnsignedBigInt(concertEndDate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  escrows(param0: BigInt): Address {
    let result = super.call("escrows", "escrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_escrows(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("escrows", "escrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEscrowAddressByTicketType(ticketType: BigInt): Address {
    let result = super.call(
      "getEscrowAddressByTicketType",
      "getEscrowAddressByTicketType(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(ticketType)],
    );

    return result[0].toAddress();
  }

  try_getEscrowAddressByTicketType(
    ticketType: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEscrowAddressByTicketType",
      "getEscrowAddressByTicketType(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(ticketType)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRegistered(param0: Address): boolean {
    let result = super.call("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateEscrowCall extends ethereum.Call {
  get inputs(): CreateEscrowCall__Inputs {
    return new CreateEscrowCall__Inputs(this);
  }

  get outputs(): CreateEscrowCall__Outputs {
    return new CreateEscrowCall__Outputs(this);
  }
}

export class CreateEscrowCall__Inputs {
  _call: CreateEscrowCall;

  constructor(call: CreateEscrowCall) {
    this._call = call;
  }

  get _organizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _concertId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _ticketType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _typeName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _price(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _url(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _ticketCount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _ddl(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get concertEndDate(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class CreateEscrowCall__Outputs {
  _call: CreateEscrowCall;

  constructor(call: CreateEscrowCall) {
    this._call = call;
  }

  get escrowAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMarketAddressCall extends ethereum.Call {
  get inputs(): SetMarketAddressCall__Inputs {
    return new SetMarketAddressCall__Inputs(this);
  }

  get outputs(): SetMarketAddressCall__Outputs {
    return new SetMarketAddressCall__Outputs(this);
  }
}

export class SetMarketAddressCall__Inputs {
  _call: SetMarketAddressCall;

  constructor(call: SetMarketAddressCall) {
    this._call = call;
  }

  get _marketAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketAddressCall__Outputs {
  _call: SetMarketAddressCall;

  constructor(call: SetMarketAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
