// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Factory | null {
    return changetype<Factory | null>(store.get_in_block("Factory", id));
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lotteryCount(): BigInt {
    let value = this.get("lotteryCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lotteryCount(value: BigInt) {
    this.set("lotteryCount", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get registered(): Array<Bytes> {
    let value = this.get("registered");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set registered(value: Array<Bytes>) {
    this.set("registered", Value.fromBytesArray(value));
  }
}

export class Lottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lottery entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lottery must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Lottery", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Lottery | null {
    return changetype<Lottery | null>(store.get_in_block("Lottery", id));
  }

  static load(id: string): Lottery | null {
    return changetype<Lottery | null>(store.get("Lottery", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get createAtTimestamp(): BigInt {
    let value = this.get("createAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createAtTimestamp(value: BigInt) {
    this.set("createAtTimestamp", Value.fromBigInt(value));
  }

  get createAtBlockNumber(): BigInt {
    let value = this.get("createAtBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createAtBlockNumber(value: BigInt) {
    this.set("createAtBlockNumber", Value.fromBigInt(value));
  }

  get concertId(): string {
    let value = this.get("concertId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set concertId(value: string) {
    this.set("concertId", Value.fromString(value));
  }

  get ticketType(): BigInt {
    let value = this.get("ticketType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketType(value: BigInt) {
    this.set("ticketType", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get url(): string {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get ddl(): BigInt {
    let value = this.get("ddl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ddl(value: BigInt) {
    this.set("ddl", Value.fromBigInt(value));
  }

  get completeDraw(): boolean {
    let value = this.get("completeDraw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set completeDraw(value: boolean) {
    this.set("completeDraw", Value.fromBoolean(value));
  }

  get ticketCount(): BigInt {
    let value = this.get("ticketCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketCount(value: BigInt) {
    this.set("ticketCount", Value.fromBigInt(value));
  }

  get remainingTicketCount(): BigInt {
    let value = this.get("remainingTicketCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingTicketCount(value: BigInt) {
    this.set("remainingTicketCount", Value.fromBigInt(value));
  }

  get winners(): Array<string> | null {
    let value = this.get("winners");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set winners(value: Array<string> | null) {
    if (!value) {
      this.unset("winners");
    } else {
      this.set("winners", Value.fromStringArray(<Array<string>>value));
    }
  }

  get organizer(): string {
    let value = this.get("organizer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set organizer(value: string) {
    this.set("organizer", Value.fromString(value));
  }

  get participants(): LotteryParticipantLoader {
    return new LotteryParticipantLoader(
      "Lottery",
      this.get("id")!.toString(),
      "participants",
    );
  }

  get nftMetadata(): string | null {
    let value = this.get("nftMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftMetadata(value: string | null) {
    if (!value) {
      this.unset("nftMetadata");
    } else {
      this.set("nftMetadata", Value.fromString(<string>value));
    }
  }
}

export class Participant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Participant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Participant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Participant", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Participant | null {
    return changetype<Participant | null>(
      store.get_in_block("Participant", id),
    );
  }

  static load(id: string): Participant | null {
    return changetype<Participant | null>(store.get("Participant", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nfts(): NFTLoader {
    return new NFTLoader("Participant", this.get("id")!.toString(), "nfts");
  }

  get listings(): NFTLoader {
    return new NFTLoader("Participant", this.get("id")!.toString(), "listings");
  }

  get lotteries(): LotteryParticipantLoader {
    return new LotteryParticipantLoader(
      "Participant",
      this.get("id")!.toString(),
      "lotteries",
    );
  }

  get createLotteries(): LotteryLoader {
    return new LotteryLoader(
      "Participant",
      this.get("id")!.toString(),
      "createLotteries",
    );
  }

  get winningLotteries(): LotteryLoader {
    return new LotteryLoader(
      "Participant",
      this.get("id")!.toString(),
      "winningLotteries",
    );
  }
}

export class LotteryParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LotteryParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LotteryParticipant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LotteryParticipant", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LotteryParticipant | null {
    return changetype<LotteryParticipant | null>(
      store.get_in_block("LotteryParticipant", id),
    );
  }

  static load(id: string): LotteryParticipant | null {
    return changetype<LotteryParticipant | null>(
      store.get("LotteryParticipant", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get participant(): string {
    let value = this.get("participant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set participant(value: string) {
    this.set("participant", Value.fromString(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFT | null {
    return changetype<NFT | null>(store.get_in_block("NFT", id));
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get lotteryAddress(): string {
    let value = this.get("lotteryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lotteryAddress(value: string) {
    this.set("lotteryAddress", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get nftMetadata(): string | null {
    let value = this.get("nftMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftMetadata(value: string | null) {
    if (!value) {
      this.unset("nftMetadata");
    } else {
      this.set("nftMetadata", Value.fromString(<string>value));
    }
  }
}

export class NFTMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMetadata | null {
    return changetype<NFTMetadata | null>(
      store.get_in_block("NFTMetadata", id),
    );
  }

  static load(id: string): NFTMetadata | null {
    return changetype<NFTMetadata | null>(store.get("NFTMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get concertName(): string {
    let value = this.get("concertName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set concertName(value: string) {
    this.set("concertName", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class LotteryParticipantLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LotteryParticipant[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LotteryParticipant[]>(value);
  }
}

export class NFTLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NFT[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NFT[]>(value);
  }
}

export class LotteryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Lottery[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Lottery[]>(value);
  }
}
